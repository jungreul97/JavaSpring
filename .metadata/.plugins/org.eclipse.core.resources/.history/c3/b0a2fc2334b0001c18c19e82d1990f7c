package com.ict.controller;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

// 어노테이션에 네종류가 있는데(@Component, @Repository, @Controller, @Service)
// 컨트롤러를 만드는 경우이니 당연히 @Controller를 씁니다.
@Controller
public class BasicController {
	
	// RequestMapping의 value는 localhost:8181/어떤 주소로 접속시 해당 로직이 실행될지 결정합니다.
	// 아무것도 안적으면 기본적으로 get방식을 허용합니다.
	@RequestMapping(value="/goA")
	// 아래에 해당 주소로 접속시 실행하고 싶은 메서드를 작성합니다.
	public String goA() {
		System.out.println("goA의 접속이 감지되었습니다.");
		// return "goA";라고 적으면 views 폴더 내부의 goA.jsp 파일을 보여줍니다.
		return "goA";
	}
	
	// /goB로 접속했을때 b.jsp 열리도록 아래에 세팅해주세요.
	@RequestMapping(value="/goB")
	public String go() {
		System.out.println("goB의 접속이 감지되었습니다.");
		return "b";
	}
	
	// 여러분들의 성함 성씨 기준으로 패턴을 잡고
	// 결과 페이지는 "XXX의 페이지 입니다." 라는 문장이 뜨도록 처리해서 메서드와 어노테이션을 보내주세요.
	@RequestMapping(value="/kim")
	public String gokim() {
		System.out.println("김정률 입니다.");
		return "jungreul";
	}
	
	// 외부에서 전송하는 데이터는 메서드 선언부에 선언된 변수로 받습니다.
	// 이름만 일치하면 알아서 받아옵니다.
	// 자료형을 신경쓸 필요가 없습니다.
	@RequestMapping(value="/getData", method=RequestMethod.POST)
					// getData? data1 = 데이터& data2 = 데이터2에 해당하는 요소를 받아옵니다.
	public String getData(String data1, int data2,
							Model model, HttpServletRequest request) throws UnsupprotedEncodingException {
		request.setCharacterEncoding("utf-8");
		System.out.println("data1에 든 값 : "+data1);
		System.out.println("data2에 든 값 : "+data2);
		System.out.println("data2가 정수임을 증명 : "+(data2+100));
		// data1, data2 변수를 getResult.jsp
		model.addAttribute("data1",data1);
		model.addAttribute("data2",data2);
		return "getResult";
	}
	
	// 외부에서 전송하는 데이터를 /getMoney 주소로 받아오겠습니다.
	// 이 주소는 int won 이라는 형식으로 금액을 받아서
	// 환율에 따른 환전금액을 콘솔에 찍어줍니다.
	// 결과페이지는 exchange.jsp로 하겠습니다.
	// 메서드명은 임의로 만들어주세요.
	@RequestMapping(value="/getMoney", method=RequestMethod.POST) // POST방식으로만 받도록 처리
							// 1. 포워딩시 바인딩을 하고 싶다면 Model을 선언합니다.
	public String exchange(int won, Model model) {
		System.out.println("입력된 금액은 : "+won+" 입니다");
		System.out.println("입력한 금액에 따른 환전금액은 "+(won/36.16)+" 바트 입니다.");
		double result = (won/36.16);
		// 2. model.addAttribute("보낼 이름",보낼 자료);
		// 넘어간 데이터는 .jsp파일에서 el을 이용해 출력합니다.
		// ex -> model.addAttribute("test",자료); 로 바인딩한 경우
		// ${test} 로 .jsp 에서 출력 가능
		model.addAttribute("won",won);
		model.addAttribute("result",result);
		// exchange.jsp를 타겟으로 하니 views폴더에 생성해주세요.
		return "exchange";
	}
	
	// form 페이지와 결과페이지를 분리해야 합니다.
	// 다만 목적지 주소가 .jsp기준이 아닌, @RequestMapping상의 주소기준으로 갑니다.
	// 주소 moneyForm으로 연결되도록 아래에 어노테이션 + 메서드를 구성해주세요.
	// moneyForm.jsp로 연결됩니다.
	// moneyForm.jsp에는 목적지를 #으로 하고
	// name=won 인 폼을 추가로 만들어주세요.
	@RequestMapping(value="/moneyForm")
	public String moneyForm() {
		return "moneyForm";
	}
	
	// 상단 /getData 주소를 타겟으로 하는 /dataForm을 만들어주세요.
	// data1, data2를 자료형에 맞게 폼으로 입력받아 전송버튼을 누르면
	// 해당 데이터가 결과 페이지에 나올 수 있도록 .jsp파일부터 시작해서
	// form태그나 세부 로직까지 완성시켜주세요.
	// 1. 주소 몇 연결 메서드 완성 후 보내주시고
	// 2. form태그 완성 후 보내주세요.
	@RequestMapping(value="/dataForm")
	public String dataForm() {
		return "dataForm";
	}
	
}
